// Data.Finds the node which contains the minimal value of the heap
// Data.Maybe returns the rank and root (key) of the node
Data.Data.Heap.Binomial.findMinNode (pq: Data.Data.Heap.Binomial) : Data.Maybe (Data.Pair Data.U60 Data.U60)
Data.Data.Heap.Binomial.findMinNode (Data.List.nil  t     ) = Data.Maybe.none
Data.Data.Heap.Binomial.findMinNode (Data.List.cons t x xs) =
  Data.Maybe.some (Data.Data.Heap.Binomial.findMinNode.aux xs (Data.Data.Heap.Binomial.Node.rank_root x))

Data.Data.Heap.Binomial.findMinNode.aux (pq: Data.Data.Heap.Binomial) (pair: (Data.Pair Data.U60 Data.U60)) : (Data.Pair Data.U60 Data.U60)
Data.Data.Heap.Binomial.findMinNode.aux (Data.List.nil  t     ) min_pair = min_pair
Data.Data.Heap.Binomial.findMinNode.aux (Data.List.cons t x xs) min_pair =
  (Data.Pair.get (Data.Data.Heap.Binomial.Node.rank_root x) (x_rank => x_root =>
  (Data.Data.Heap.Binomial.findMinNode.aux2 (Data.U60.less_than x_root (Data.Pair.fst min_pair)) xs min_pair (Data.Pair.new x_rank x_root))))

Data.Data.Heap.Binomial.findMinNode.aux2 (b: Data.Bool) (xs: Data.Data.Heap.Binomial) (min: (Data.Pair Data.U60 Data.U60)) (x: (Data.Pair Data.U60 Data.U60)) : (Data.Pair Data.U60 Data.U60)
Data.Data.Heap.Binomial.findMinNode.aux2 Data.Bool.true  xs min_pair x_pair = (Data.Data.Heap.Binomial.findMinNode.aux xs   x_pair)
Data.Data.Heap.Binomial.findMinNode.aux2 Data.Bool.false xs min_pair x_pair = (Data.Data.Heap.Binomial.findMinNode.aux xs min_pair)
