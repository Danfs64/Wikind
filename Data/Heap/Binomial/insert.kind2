// Inserts a key into the heap
// It does so by creating a Node with the key and calling InsertTree
Data.Heap.Binomial.insert (x: U60) (pq: Data.Heap.Binomial) : Data.Heap.Binomial
Data.Heap.Binomial.insert x pq = (InsertTree (Data.Heap.Binomial.Node.new 0 x Data.Heap.Binomial.nil) pq)

// Inserts a Tree into the heap
// P.S.: Do not call it manually, you could break the heap structure
InsertTree (new: Data.Heap.Binomial.Node) (pq: Data.Heap.Binomial) : Data.Heap.Binomial

InsertTree node (List.nil t) =
  Data.Heap.Binomial.cons node Data.Heap.Binomial.nil

InsertTree (Data.Heap.Binomial.Node.new new_rank new_root new_child) (List.cons t (Data.Heap.Binomial.Node.new x_rank x_root x_child) xs) =
  let node = (Data.Heap.Binomial.Node.new new_rank new_root new_child)
  let heap = (List.cons t (Data.Heap.Binomial.Node.new x_rank x_root x_child) xs)
  InsertTree.aux (U60.less_than new_rank x_rank) node heap

InsertTree.aux (b: Bool) (new: Data.Heap.Binomial.Node) (xs: Data.Heap.Binomial) : Data.Heap.Binomial
InsertTree.aux Bool.true  new  xs                = Data.Heap.Binomial.cons new xs
InsertTree.aux Bool.false new (List.cons t x xs) = InsertTree (Data.Heap.Binomial.Node.link new x) xs
