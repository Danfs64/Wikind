// Links together two trees with the same rank
// The tree returned will be the tree with smaller root with:
//   - the other tree as one of its children
//   - its rank increased by 1
Data.Heap.Binomial.Node.link (n1: Data.Heap.Binomial.Node) (n2: Data.Heap.Binomial.Node) : Data.Heap.Binomial.Node
Data.Heap.Binomial.Node.link (Data.Heap.Binomial.Node.new r1 x1 c1) (Data.Heap.Binomial.Node.new r2 x2 c2) =
  Data.Heap.Binomial.Node.link.aux (U60.less_than x1 x2) (Data.Heap.Binomial.Node.new r1 x1 c1) (Data.Heap.Binomial.Node.new r2 x2 c2)

Data.Heap.Binomial.Node.link.aux (c: Bool) (n1: Data.Heap.Binomial.Node) (n2: Data.Heap.Binomial.Node) : Data.Heap.Binomial.Node
Data.Heap.Binomial.Node.link.aux Bool.true  (Data.Heap.Binomial.Node.new r1 x1 c1) n2 =
  Data.Heap.Binomial.Node.new (+ r1 1) x1 (Data.Heap.Binomial.cons n2 c1)
Data.Heap.Binomial.Node.link.aux Bool.false n1 (Data.Heap.Binomial.Node.new r2 x2 c2) =
  Data.Heap.Binomial.Node.new (+ r2 1) x2 (Data.Heap.Binomial.cons n1 c2)
