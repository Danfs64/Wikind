Data.U60.mul.carrying (a: Data.U60) (b: Data.U60) : Data.U120 {
  let alo = (>> (<< a 30) 30)
  let ahi = (>> a 30)
  let blo = (>> (<< b 30) 30)
  let bhi = (>> b 30)

  let mul0 = (* alo blo)
  let mul1 = (* alo bhi)
  let mul2 = (* ahi blo)
  let mul3 = (* ahi bhi)

  let mul1.lo = (<< mul1 30)
  let mul2.lo = (<< mul2 30)
  let add.lo1 = Data.U60.add.overflowing mul0 mul1.lo
  let add.lo2 = Data.U60.add.overflowing (Data.Pair.snd add.lo1) mul2.lo
  let car.lo1 = Data.Bool.to_u60 (Data.Pair.fst add.lo1)
  let car.lo2 = Data.Bool.to_u60 (Data.Pair.fst add.lo2)
  let carry   = (+ car.lo1 car.lo2)
  let c.lo    = Data.Pair.snd add.lo2

  let mul1.hi = (>> mul1 30)
  let mul2.hi = (>> mul2 30)
  let c.hi = (+ mul1.hi (+ mul2.hi (+ mul3 carry)))

  Data.U120.new c.hi c.lo
}
