// Given a list, returns a pair of the list without the last element, and the last element (if it exists)

Data.List.pop_back <type: Type> (list: (Data.List type)): (Data.Pair (Data.List type) (Data.Maybe type))

// An empty list has no last element. Pop_back is a no-op on the list.
Data.List.pop_back type (Data.List.nil u) = (Data.Pair.new Data.List.nil (Data.Maybe.none type))
// If the next element is Nil, then the current element is the last one. Return it.
Data.List.pop_back type (Data.List.cons u fst (Data.List.nil snd.u)) = (Data.Pair.new Data.List.nil (Data.Maybe.some fst))
// Recursive operation: pop the last item from the rest of the list, and then return what it returns but with the first item added at the beginning of the new list.
Data.List.pop_back type (Data.List.cons u fst (Data.List.cons snd.u head tail)) =
	let res = (Data.List.pop_back (Data.List.cons head tail))
	(Data.Pair.new (Data.List.cons fst (Data.Pair.fst res)) (Data.Pair.snd res))
