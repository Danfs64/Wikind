// rev (rev xs) == xs
Data.List.reverse.involutive <a> (xs: Data.List a) : Prop.Equal (Data.List.reverse (Data.List.reverse xs)) xs
Data.List.reverse.involutive a xs = Data.List.reverse.involutive.aux xs []


// (rev.go (rev.go xs ys) []) == (rev.go ys xs)
Data.List.reverse.involutive.aux <a> (xs: Data.List a) (ys: Data.List a) : Prop.Equal (Data.List.reverse.go (Data.List.reverse.go xs ys) []) (Data.List.reverse.go ys xs)

// (rev.go (rev.go [] ys) []) == (rev.go ys [])
// Infering that (rev.go [] ys) == ys
Data.List.reverse.involutive.aux a (Data.List.nil t) ys = Prop.Equal.refl

// (rev.go (rev.go xs.t (xs.h & ys)) []) == (rev.go xs.t (xs.h & ys))
// Infering that (rev.go (xs.h & xs.t) ys) == (rev.go xs.t (xs.h & ys))
Data.List.reverse.involutive.aux a (Data.List.cons t xs.h xs.t) ys = Data.List.reverse.involutive.aux a xs.t (Data.List.cons t xs.h ys)