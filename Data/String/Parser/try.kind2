// On success, return the result
// On failure, backtrack and return none
// Never fails
Data.String.Parser.try <a> <t> (prs: Data.String.Parser t a) : Data.String.Parser t (Data.Maybe a) {
  state =>
    open Data.String.Parser.State state
    let init_idx = state.index
    let state = Data.String.Parser.State.new state.custom state.left state.back state.index
    match Data.String.Parser.Result r = (prs state) {
      done state result => Data.String.Parser.Result.done state (Data.Maybe.some result)
      fail state .. =>
        open Data.String.Parser.State state
        let n_back    = (- state.index init_idx)
        let new_state = Data.String.Parser.State.new state.custom state.left state.back state.index
        let old_state = Data.String.Parser.State.backtrack n_back new_state
        Data.String.Parser.Result.done old_state Data.Maybe.none
    }
}