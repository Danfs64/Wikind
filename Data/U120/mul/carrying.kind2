Data.U120.mul.carrying (a: Data.U120) (b: Data.U120) : Data.U240
Data.U120.mul.carrying (Data.U120.new ahi alo) (Data.U120.new bhi blo) =
  let mul0 = Data.U60.mul.carrying alo blo  // [1 0]
  let mul1 = Data.U60.mul.carrying alo bhi  // [2 1]
  let mul2 = Data.U60.mul.carrying ahi blo  // [2 1]
  let mul3 = Data.U60.mul.carrying ahi bhi  // [3 2]

  // Add up each matching u60 chunk smallest to largest

  // chunk 0
  let res.lo.lo = Data.U120.low mul0

  // chunk 1
  let add1.1 = Data.U60.add.overflowing (Data.U120.high mul0)  (Data.U120.low mul1)
  let add1.2 = Data.U60.add.overflowing (Data.Pair.snd add1.1) (Data.U120.low mul2)
  let car1.1 = Data.Bool.to_u60 (Data.Pair.fst add1.1)
  let car1.2 = Data.Bool.to_u60 (Data.Pair.fst add1.2)
  let carry1 = (+ car1.1 car1.2)
  let res.lo.hi = Data.Pair.snd add1.2

  // chunk 2
  let add2.1 = Data.U60.add.overflowing (Data.U120.high mul1)   (Data.U120.high mul2)
  let add2.2 = Data.U60.add.overflowing (Data.Pair.snd  add2.1) (Data.U120.low  mul3)
  let add2.3 = Data.U60.add.overflowing (Data.Pair.snd  add2.2) carry1
  let car2.1 = Data.Bool.to_u60 (Data.Pair.fst add2.1)
  let car2.2 = Data.Bool.to_u60 (Data.Pair.fst add2.2)
  let car2.3 = Data.Bool.to_u60 (Data.Pair.fst add2.3)
  let carry2 = (+ (+ car2.1 car2.2) car2.3)
  let res.hi.lo = Data.Pair.snd add2.3

  // chunk 3
  let res.hi.hi = (+ (Data.U120.high mul3) carry2)

  Data.U240.new (Data.U120.new res.hi.hi res.hi.lo) (Data.U120.new res.lo.hi res.lo.lo)