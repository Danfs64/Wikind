Data.Bits.Map.update <a> 
  (map: Data.Bits.Map a)
  (key: Data.Bits)
  (func: a -> a)
: Data.Bits.Map a

// Data.Bits.e
Data.Bits.Map.update a (Data.Bits.Map.tie t (Data.Maybe.none x) left right) Data.Bits.e func = 
  let value = Data.Maybe.none
  Data.Bits.Map.tie t value left right

Data.Bits.Map.update a (Data.Bits.Map.tie t (Data.Maybe.some x value) left right) Data.Bits.e func =
  let value = Data.Maybe.some (func value)
  Data.Bits.Map.tie t value left right

// Data.Bits.o
Data.Bits.Map.update a (Data.Bits.Map.new t) (Data.Bits.o pred) func =
  let value = Data.Maybe.none
  let left  = Data.Bits.Map.update (Data.Bits.Map.new t) pred func
  let right = Data.Bits.Map.new
  Data.Bits.Map.tie value left right  

Data.Bits.Map.update a (Data.Bits.Map.tie t value left right) (Data.Bits.o pred) func = 
  let left = Data.Bits.Map.update left pred func
  Data.Bits.Map.tie t value left right

// Data.Bits.i
Data.Bits.Map.update a (Data.Bits.Map.new t) (Data.Bits.i pred) func = 
  let value = Data.Maybe.none
  let left  = Data.Bits.Map.update a (Data.Bits.Map.new t) pred func
  let right = Data.Bits.Map.new
  Data.Bits.Map.tie t value left right

Data.Bits.Map.update a (Data.Bits.Map.tie t value left right) (Data.Bits.i pred) func =
  let right = Data.Bits.Map.update right pred func
  Data.Bits.Map.tie t value left right
