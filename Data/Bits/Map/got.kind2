// Gets in a map a value that corresponds to the Data.Bits
Data.Bits.Map.got <a> (map : Data.Bits.Map a) (key : Data.Bits) : Data.Pair (Data.Bits.Map a) (Data.Maybe a)
Data.Bits.Map.got Data.Bits.Map.new key                         = Data.Pair.new Data.Bits.Map.new Data.Maybe.none
Data.Bits.Map.got (Data.Bits.Map.tie val lft rgt) Data.Bits.e        = Data.Pair.new (Data.Bits.Map.tie val lft rgt) val
Data.Bits.Map.got (Data.Bits.Map.tie val lft rgt) (Data.Bits.o pred) = Data.Bits.Map.got.lft val (Data.Bits.Map.got lft pred) rgt
Data.Bits.Map.got (Data.Bits.Map.tie val lft rgt) (Data.Bits.i pred) = Data.Bits.Map.got.rgt val lft (Data.Bits.Map.got rgt pred)

Data.Bits.Map.got.lft <a> (val: Data.Maybe a) (lft: Data.Pair (Data.Bits.Map a) (Data.Maybe a)) (rgt: Data.Bits.Map a) : Data.Pair (Data.Bits.Map a) (Data.Maybe a)
Data.Bits.Map.got.lft val (Data.Pair.new lft res) rgt = Data.Pair.new (Data.Bits.Map.tie val lft rgt) res

Data.Bits.Map.got.rgt <a> (val: Data.Maybe a) (lft: Data.Bits.Map a) (rgt: Data.Pair (Data.Bits.Map a) (Data.Maybe a)) : Data.Pair (Data.Bits.Map a) (Data.Maybe a)
Data.Bits.Map.got.rgt val lft (Data.Pair.new rgt res) = Data.Pair.new (Data.Bits.Map.tie val lft rgt) res
