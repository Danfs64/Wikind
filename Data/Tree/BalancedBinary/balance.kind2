Data.Tree.BalancedBinary.balance <key> <value> (k: key) (v: value) (l: Data.Tree.BalancedBinary key value) (r: Data.Tree.BalancedBinary key value): Data.Tree.BalancedBinary key value {
  let size               = (x : Data.Tree.BalancedBinary key value) => Data.Tree.BalancedBinary.size x
  let size_l             = (size l)
  let size_r             = (size r)
  let sizes_sum          = (Data.U120.add size_l size_r)
  let w_x_size_l         = (Data.U120.mul Data.Tree.BalancedBinary.w size_l)
  let w_x_size_r         = (Data.U120.mul Data.Tree.BalancedBinary.w size_r)
  // sizes_sum < 2 means that one subtree is empty and the
  // other contains only one element, hence the tree cannot be balanced 
  if (Data.U120.less_than sizes_sum Data.U120.2) { 
    (Data.Tree.BalancedBinary.node k v l r)
  // size_r > w * size_l means the right subtree is too heavy
  } else { 
    if (Data.U120.greater_than size_r w_x_size_l) {
      match Data.Tree.BalancedBinary r {
      // this is an impossible case because we already know that
      // the right subtree is too heavy
      // question: how to deal with it?
      tip => (Data.Tree.BalancedBinary.node k v l r)
      bin (key = right.key) (val = right.val) (left = right.left) (right = right.right) .. =>  
        // size rl < size rr means we should perform a single left rotation
        if (Data.U120.less_than (size right.left) (size right.right)) { 
          let new_left  = (Data.Tree.BalancedBinary.node k v l right.left)
          (Data.Tree.BalancedBinary.node right.key right.val new_left right.right)
        // size_rl > size_rr means we should perform a double left rotation
        } else {
        // we need to branch on the left subtree of r in order to extract its components 
        match Data.Tree.BalancedBinary right.left {
          tip => (Data.Tree.BalancedBinary.node k v l r) // impossible case
          bin (key = rleft.key) (val = rleft.val) (left = rleft.left) (right = rleft.right) .. =>  
          let new_left  = (Data.Tree.BalancedBinary.node k v l rleft.left) 
          let new_right = (Data.Tree.BalancedBinary.node right.key right.val rleft.right right.right)
          (Data.Tree.BalancedBinary.node rleft.key rleft.val new_left new_right)
        }
        }
      }
    // size_l > w * size_r means the left subtree is too heavy  
    } else {
      if (Data.U120.greater_than size_l w_x_size_r) {
        match Data.Tree.BalancedBinary l {
        // this is an impossible case because we already know that
        // the left subtree is too heavy
        // question => how to deal with it?
        tip => (Data.Tree.BalancedBinary.node k v l r)
        bin (key = left.key) (val = left.val) (left = left.left) (right = left.right) .. =>  
          // size_lr < size_lln means we should perform a single right rotation
          if (Data.U120.less_than (size left.right) (size left.left)) {
            let new_right = (Data.Tree.BalancedBinary.node k v left.right r)
            (Data.Tree.BalancedBinary.node left.key left.val left.left new_right)
          // size_lr > size_ll means we should perform a double right rotation
          } else {
            // we need to branch on the right subtree of l in order to 
            // extract its components and move them to the right
            match Data.Tree.BalancedBinary left.right {
            tip => (Data.Tree.BalancedBinary.node k v l r) // impossible case 
            bin (key = lright.key) (val = lright.val) (left = lright.left) (right = lright.right) .. =>  
              let new_left  = (Data.Tree.BalancedBinary.node lright.key lright.val left.left lright.left)
              let new_right = (Data.Tree.BalancedBinary.node k v lright.right r)
              (Data.Tree.BalancedBinary.node lright.key lright.val new_left new_right)
            }
          }
        }
      } else { // neither subtrees are too heavy, no balancing is needed 
        (Data.Tree.BalancedBinary.node k v l r)
      }
    }
  }
}
