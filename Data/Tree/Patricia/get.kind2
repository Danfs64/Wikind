Data.Tree.Patricia.get <a: Type> (map: Data.Tree.Patricia a) (key: Data.U60): Data.Maybe a
Data.Tree.Patricia.get a (Data.Tree.Patricia.leaf t j x) key =
  Data.Tree.Patricia.getAux0 a (Data.U60.equal j key) x
Data.Tree.Patricia.get a (Data.Tree.Patricia.branch t p m t0 t1) key = 
  Data.Tree.Patricia.getAux1 a (Data.Tree.Patricia.matchprefix key p m) key m t0 t1
Data.Tree.Patricia.get a (Data.Tree.Patricia.empty) key =
  Data.Maybe.none

Data.Tree.Patricia.getAux0 <a: Type> (b: Data.Bool) (val: a):  Data.Maybe a
Data.Tree.Patricia.getAux0 a Data.Bool.true  val = Data.Maybe.some val
Data.Tree.Patricia.getAux0 a Data.Bool.false val = Data.Maybe.none

Data.Tree.Patricia.getAux1 <a: Type> (b: Data.Bool) (key: Data.U60) (m: Data.U60) (t0: Data.Tree.Patricia a) (t1: Data.Tree.Patricia a): Data.Maybe a
Data.Tree.Patricia.getAux1 a Data.Bool.false k m t0 t1 =
  Data.Maybe.none
Data.Tree.Patricia.getAux1 a Data.Bool.true  k m t0 t1 =
  Data.Tree.Patricia.getAux2 (Data.Tree.Patricia.zerobit k m) k t0 t1

Data.Tree.Patricia.getAux2 <a: Type> (b: Data.Bool) (key: Data.U60) (t0: Data.Tree.Patricia a) (t1: Data.Tree.Patricia a): Data.Maybe a
Data.Tree.Patricia.getAux2 a Data.Bool.true  k t0 t1 =
  Data.Tree.Patricia.get t0 k
Data.Tree.Patricia.getAux2 a Data.Bool.false k t0 t1 =
  Data.Tree.Patricia.get t1 k


