HVM.Name : Type
HVM.Name = String

type HVM.Oper {
  add
  sub
}

type HVM.Term {
  var (name: HVM.Name)
  dup (nam0: HVM.Name) (nam1: HVM.Name) (expr: HVM.Term) (body: HVM.Term)
  lam (name: HVM.Name) (body: HVM.Term)
  app (func: HVM.Term) (argm: HVM.Term)
  ctr (name: HVM.Name) (args: List HVM.Term)
  fun (name: HVM.Name) (args: List HVM.Term)
  num (numb: U60)
  op2 (oper: HVM.Oper) (val0: HVM.Term) (val1: HVM.Term)
}

type HVM.Rule {
  new (lhs: HVM.Term) (rhs: HVM.Term)
}

HVM.Func : Type
HVM.Func = List HVM.Rule

HVM.Term.eval (term: HVM.Term) : HVM.Term
HVM.Term.eval (HVM.Term.var name)           = HVM.Term.var name
HVM.Term.eval (HVM.Term.lam name body)      = HVM.Term.lam name body
HVM.Term.eval (HVM.Term.app func argm)      = HVM.Term.app func argm
HVM.Term.eval (HVM.Term.num numb)           = HVM.Term.num numb
HVM.Term.eval (HVM.Term.op2 oper val0 val1) = HVM.Term.eval.op2 oper val0 val1

HVM.Term.eval.op2 (oper: HVM.Oper) (val0: HVM.Term) (val1: HVM.Term) : HVM.Term
HVM.Term.eval.op2 HVM.Oper.add (HVM.Term.num val0) (HVM.Term.num val1) = HVM.Term.num (+ val0 val1)
HVM.Term.eval.op2 oper         val0                val1                = HVM.Term.num 0


