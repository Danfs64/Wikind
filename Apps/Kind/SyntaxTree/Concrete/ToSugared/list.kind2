use Apps.Kind.SyntaxTree.Concrete.ToSugared as ToSugared
use Data.List as List
use Data.Maybe as Maybe


ToSugared/list <t> <r> (args: List/ t) (pass: t -> (ToSugared/ (Maybe/ r))) : ToSugared/ (Maybe/ (List/ r))
ToSugared/list (List/cons arg args) pass =
  do ToSugared/ {
    ask head = pass arg
    ask tail = ToSugared/list args pass
    return do Maybe/ {
      ask head = head
      ask tail = tail
      return (List/cons head tail)
    }
  }

  ToSugared/list (List/nil) pass = ToSugared/pure (Maybe/some [])