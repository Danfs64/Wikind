use Apps.Kind.SyntaxTree.Concrete.ToSugared as ToSugared
use Apps.Kind.SyntaxTree.Sugared.Book as Book
use Apps.Kind.SyntaxTree.Sugared.Declaration as Declaration
use Apps.Kind.SyntaxTree.Sugared.Declaration.Entry as Entry
use Apps.Kind.SyntaxTree.Sugared.Declaration.RecordType as RecordType
use Apps.Kind.SyntaxTree.Sugared.Declaration.SumType as SumType
use Apps.Kind.SyntaxTree.CtrName as CtrName
use Data.HashMap as HashMap
use Data.Map as Map
use Data.Maybe as Maybe
use Data.Pair as Pair

//! Add a declaration to the given book, adding it to the declarations
//! and adding all names it defines to the set of names.
ToSugared/add_decl_to_book (book: Book/) (decl: Declaration/) : ToSugared/ Book/
ToSugared/add_decl_to_book (Book/new decls n_decls names) (Declaration/entry (Entry/new range name args type rules)) =
  let name_str = (CtrName/val.get name)
  let decl = (Declaration/entry (Entry/new range name args type rules))
  let Pair/new (fst=names) (snd=prev) = (HashMap/got names name_str)
  let book = (Book/new decls n_decls names)
  ToSugared/add_decl_to_book.entry.2 book decl prev  

// ToSugared/add_decl_to_book (Book/new decls n_decls names) (Declaration/sum (SumType/new name params indices ctrs range)) =
// ToSugared/add_decl_to_book (Book/new decls n_decls names) (Declaration/record (RecordType/new name params range)) =

ToSugared/add_decl_to_book.entry.2 (book: Book/) (decl: Declaration/) (prev: Maybe/ Data.U60) : ToSugared/ Book/
ToSugared/add_decl_to_book.entry.2 (Book/new decls n_decls names) decl (Maybe/none) =
  // Not present, can add entry
  let Pair/new (fst=decl) (snd=name) = Declaration/get_name decl
  let name = (CtrName/val.get name)
  let names = (HashMap/set names name n_decls)
  let decls = (Map/set decls n_decls decl)
  let n_decls = (+ 1 n_decls)
  ToSugared/pure (Book/new decls n_decls names)
ToSugared/add_decl_to_book.entry.2 (Book/new decls n_decls names) decl (Maybe/some prev_idx) =
  // Already present, error
  let Pair/new (fst=decls) (snd=prev) = Map/take decls prev_idx
  let book = Book/new decls n_decls names
  ToSugared/add_decl_to_book.entry.3 book decl prev prev_idx

ToSugared/add_decl_to_book.entry.3 (book: Book/) (decl: Declaration/) (prev: Maybe/ Declaration/) (prev_idx: Data.U60) : ToSugared/ Book/
ToSugared/add_decl_to_book.entry.3 (Book/new decls n_decls names) decl (Maybe/some prev) prev_idx =
  let Pair/new (fst=prev) (snd=name) = Declaration/get_name prev
  let prev_range = (CtrName/range.get name)
  let decls = Map/set decls prev_idx prev
  let err = ToSugared/Error.multiple_defs decl prev_range
  do ToSugared/ {
    ToSugared/add_err err
    return Book/new decls n_decls names
  }
ToSugared/add_decl_to_book.entry.3 book decl (Maybe/none) prev_idx =
  let err = ToSugared/Error.internal "add_decl_to_book: not found"
  do ToSugared/ {
    ToSugared/add_err err
    return book
  }