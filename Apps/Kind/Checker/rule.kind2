use Apps.Kind.Checker as Checker
use Apps.Kind.Rule as Rule
use Apps.Kind.Term as Term
use Apps.Kind.Error as Error

//! Checks a @Apps.Kind.Rule@ against a term.
//! Example:
//!
//! @
//! pred (n: Data.Nat): Data.Nat
//! pred (S n) = n
//! @
//!
//! In the example above, we have a rule that starts with a
//! left hand side part ((S n)) that will have to check
//! against the pi type that `pred` declarated in order to
//! succeded.
Checker/rule (rule: Apps.Kind.Rule) (term: Apps.Kind.Term): Apps.Kind.Checker Data.Unit

Checker/rule (Rule/lhs arg args) (Term/all orig name type body) =
  do Apps.Kind.Checker {
    Checker/check arg type
    Checker/rule args (body arg)
    return Data.Unit.new
  }

Checker/rule (Rule/lhs arg args) other =
  do Apps.Kind.Checker {
    ask ctx = Checker/get_context
    (Checker/fail (Error/too_many_arguments ctx (Term/get_origin arg (orig => term => orig))))
  }

Checker/rule (Apps.Kind.Rule.rhs expr) type =
  do Apps.Kind.Checker {
    Checker/set_right_hand_side Data.Bool.true
    Checker/check expr type
    return Data.Unit.new
  }