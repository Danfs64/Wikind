use Data.String.Parser as Parser
use Apps.Kind.Parser as KParser
use Apps.Kind.SyntaxTree.Sugared as AST

KParser/term : KParser/ AST/term {
  Parser/first_of [
    KParser/term.open // open var ;? term
    KParser/term.let // let var = term ;? term
    KParser/term.specialize // specialize term into #num in term
    KParser/term.match // match Type term {case => } : term
    KParser/term.sigma_type // [term : term] -> term
    KParser/term.arg_term // starting with (var: term)
    KParser/term.lambda_untyped // var => term
    KParser/term.seqrecord // ! simple simple (. var)* ((= expr) | (@= expr) | ())
    KParser/term.binary_op // + simple simple
    KParser/term.sigma_pair // $ simple simple
    KParser/term.literal // Any literal like [list], "string", 0, Type, etc
    KParser/term.pi_anon // term -> term
    KParser/term.annotated // term :: term

    KParser/term.call // simple*  (fun, ctr, app, if, do, group aka term inside parens)
  ]
}
