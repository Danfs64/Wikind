use Data.String.Parser as Parser
use Apps.Kind.Parser as KParser
use Apps.Kind.SyntaxTree.Concrete.Term as Term

KParser/term.lambda_untyped : KParser/ Term/ {
  do Parser/ {
    ask start = Parser/get_index

    ask erased = Parser/is_some (Parser/try (Parser/char '~'))
    KParser/skip
    ask param = KParser/var_name
    KParser/skip
    Parser/string "=>"
    KParser/skip
    ask body = KParser/term

    ask range = KParser/make_range_here start
    return Term/lambda range param Data.Maybe.none body erased 
  }
}
