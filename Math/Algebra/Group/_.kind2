// Automatically derived from Math.Algebra.Group/_.type
// A set equipped with a single binary operation that is associative
// with a neutral element and inverse for all elements.
// Let '*' be the the binary operation and 'e' the neutral element then:
//
// - forall a b c, (a * b) * c = a * (b * c) (Associativity)
// - forall a    , a = a * e                 (Right identity)
// - forall a    , a = e * a                 (Left identity)
// - forall a    , a * a^-1 = e              (Right inverse)
// - forall a    , a^-1 * a = e              (Left inverse)
//
// Or just a monoid with inverse.
#derive[match]
type Math.Algebra.Group <t> {
  new (monoid: Math.Algebra.Monoid t) (invert: t -> t) (inverse: Math.Algebra.Laws.Inverse t (Math.Algebra.Monoid.concat monoid) invert (Math.Algebra.Monoid.empty monoid))
}