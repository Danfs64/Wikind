Kind.Coverage.Problem.is_solved (problem: Kind.Coverage.Problem) : Bool
Kind.Coverage.Problem.is_solved (Kind.Coverage.Problem.new _ rows) =
    let rows = (List.head rows)
    match Maybe rows {
        some (value = row) =>
            (Bool.and
                (Kind.Coverage.Constraint.is_rhs (Kind.Coverage.Row.rule.get row))
                (List.all (Kind.Coverage.Row.constraints.get row) (x => Kind.Coverage.Constraint.is_solved x)))
        none => Bool.false
    }