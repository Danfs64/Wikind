
Kind.Coverage.Problem.split_on_literal (problem: Kind.Coverage.Problem) (family: Kind.Name) (cons: Kind.Name) (constraint: Kind.Coverage.Constraint) : Kind.Checker Kind.Coverage.CaseTree

Kind.Coverage.Problem.split_on_constructor (problem: Kind.Coverage.Problem) (family: Kind.Name) (cons: Kind.Name) (constraint: Kind.Coverage.Constraint) : Kind.Checker Kind.Coverage.CaseTree
Kind.Coverage.Problem.split_on_constructor (Kind.Coverage.Problem.new type rows) family cons (Kind.Coverage.Constraint.new left right ty) =
    Kind.Checker.local (
        do Kind.Checker {
            match Maybe val = (Kind.Coverage.Maker.Mk cons 0 ty) {
                some (value = maker) =>
                    do Kind.Checker {
                        ask term = Kind.Coverage.Maker.make maker
                        Kind.Checker.set_right_hand_side Bool.false
                        Kind.Checker.equal term left
                        ask ctx = Kind.Checker.get_context
                        ask res = Kind.Coverage.Problem.simplify (Kind.Coverage.Problem.new type rows)
                        Kind.Coverage.check.problem res
                    }
                none =>
                    do Kind.Checker {
                        Kind.Checker.check left ty
                        return Kind.Coverage.CaseTree.done
                    }
            }
        })
